//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Iwas/RotateTest.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputRotate
{
    public partial class @InputRotate : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputRotate()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""RotateTest"",
    ""maps"": [
        {
            ""name"": ""Rotate"",
            ""id"": ""58725f43-2ed2-4710-93e0-553bfa8861dc"",
            ""actions"": [
                {
                    ""name"": ""LeftRotate"",
                    ""type"": ""Button"",
                    ""id"": ""5f1fbefc-61a2-4cc7-abda-07d1d3554ed0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RIghtRotate"",
                    ""type"": ""Button"",
                    ""id"": ""fc9737a7-5e07-49be-89bb-56bd01059ed5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0c7db3f-3ae0-4a9f-802b-bbed7d9e181e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4f27dd1-b505-4c75-9f79-9cbdbc170ca2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RIghtRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Rotate
            m_Rotate = asset.FindActionMap("Rotate", throwIfNotFound: true);
            m_Rotate_LeftRotate = m_Rotate.FindAction("LeftRotate", throwIfNotFound: true);
            m_Rotate_RIghtRotate = m_Rotate.FindAction("RIghtRotate", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Rotate
        private readonly InputActionMap m_Rotate;
        private IRotateActions m_RotateActionsCallbackInterface;
        private readonly InputAction m_Rotate_LeftRotate;
        private readonly InputAction m_Rotate_RIghtRotate;
        public struct RotateActions
        {
            private @InputRotate m_Wrapper;
            public RotateActions(@InputRotate wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftRotate => m_Wrapper.m_Rotate_LeftRotate;
            public InputAction @RIghtRotate => m_Wrapper.m_Rotate_RIghtRotate;
            public InputActionMap Get() { return m_Wrapper.m_Rotate; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RotateActions set) { return set.Get(); }
            public void SetCallbacks(IRotateActions instance)
            {
                if (m_Wrapper.m_RotateActionsCallbackInterface != null)
                {
                    @LeftRotate.started -= m_Wrapper.m_RotateActionsCallbackInterface.OnLeftRotate;
                    @LeftRotate.performed -= m_Wrapper.m_RotateActionsCallbackInterface.OnLeftRotate;
                    @LeftRotate.canceled -= m_Wrapper.m_RotateActionsCallbackInterface.OnLeftRotate;
                    @RIghtRotate.started -= m_Wrapper.m_RotateActionsCallbackInterface.OnRIghtRotate;
                    @RIghtRotate.performed -= m_Wrapper.m_RotateActionsCallbackInterface.OnRIghtRotate;
                    @RIghtRotate.canceled -= m_Wrapper.m_RotateActionsCallbackInterface.OnRIghtRotate;
                }
                m_Wrapper.m_RotateActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LeftRotate.started += instance.OnLeftRotate;
                    @LeftRotate.performed += instance.OnLeftRotate;
                    @LeftRotate.canceled += instance.OnLeftRotate;
                    @RIghtRotate.started += instance.OnRIghtRotate;
                    @RIghtRotate.performed += instance.OnRIghtRotate;
                    @RIghtRotate.canceled += instance.OnRIghtRotate;
                }
            }
        }
        public RotateActions @Rotate => new RotateActions(this);
        public interface IRotateActions
        {
            void OnLeftRotate(InputAction.CallbackContext context);
            void OnRIghtRotate(InputAction.CallbackContext context);
        }
    }
}
